[color]
        diff = auto
        status = auto
        branch = auto
        grep = auto

[alias]
        #st = status ##see st below == status -s
        ci = commit
        co = checkout
        f = fetch --all
        l = !git lg
        la = !git lgr
        ll = !git lgs
        lla = !git lgsr
        nffmerge = merge --no-ff --no-commit
        ffmerge = merge --ff-only
        filehist = log --branches --graph --decorate=full --remotes --follow
        tags = tag -ln
        br = branch -vv
        brr = branch -avv
        unstage = reset HEAD --
        untrack = rm --cached
        ignorelocal = update-index --assume-unchanged
        unignorelocal = update-index --no-assume-unchanged
        wtm = show-merges
        wtmr = show-remote-merges
        gcp = gc --aggressive --prune=0
        track = branch --set-upstream
        poh = push -u origin HEAD
        pohtags = push origin refs/tags/*
        pohf = push --force -u origin HEAD
        pohftags = push --force origin refs/tags/*
        nm = branch --no-merge
        
        puff = pull --ff-only
        puffs = pull --ff-only --recurse-submodules
        pulls = pull --recurse-submodules
        pur = pull --rebase
        purp = pull --rebase=preserve
        purs = pull --rebase=preserve --recurse-submodules
        
        p = puffpu origin HEAD
        pr = purepu origin HEAD
        cpu = puffpu --commit origin HEAD
        cpru = purepu --commit origin HEAD

        d = diff -b
        dchk = !git d --check
        dh = !git d HEAD --
        dh1 = !git d HEAD~ HEAD --
        sm = submodule
        
        limbo = fsck --unreachable

        up = !gitup .
        
		####################################################################################################
		## some nice aliases from https://developer.atlassian.com/blog/2015/05/the-power-of-git-subtree/
		####################################################################################################
		# the acronym stands for "subtree add" // original `sba`
		sadd = "!f() { git subtree add --prefix $2 $1 $3 --squash; }; f"
		# the acronym stands for "subtree update" // original `sbu`
		sup = "!f() { git subtree pull --prefix $2 $1 $3; }; f"
		supq = "!f() { git subtree pull --prefix $2 $1 $3 --squash; }; f"

        ####################################################################################################
        ## some nice aliases from https://stackoverflow.com/a/9074343/529977
        ####################################################################################################
        lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
        lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
        
        ####################################################################################################
        ## some nice aliases from http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
        ####################################################################################################
        ls    = log --decorate --oneline 
        ls2   = log --decorate --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]"
        ls3   = log            --pretty=format:"%h\\ %s\\ [%cn]"
        lsd   = log --decorate --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --date=short
        lsdr  = log --decorate --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --date=relative
        lsa   = !git ls --ancestry-path
        lss   = !git ls --stat
        lssa  = !git lss --ancestry-path
        lsns  = !git ls --numstat
        lsnsa = !git lss --ancestry-path
        
        lg = log --branches --graph --decorate
        lgs = !git lg --stat
        lgsr = !git lgs --remotes
        lga = !git lg --ancestry-path
        lgr = !git lg --remotes
        lgar = !git lga --remotes
        lgra = !git lgar
        filelog = log -u
        dl = "!git ll -1"
        dlc = diff --cached HEAD^
        dr  = "!f() { git diff "$1"^.."$1"; }; f"
        lc  = "!f() { git ll "$1"^.."$1"; }; f"
        diffr  = "!f() { git diff "$1"^.."$1"; }; f"
        find = "!git ls-files | grep -i"
        grepi = grep -Ii
        gr = grep
        gri = "!git grepi"
        gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
        aliases = "!git config -l | grep alias | cut -c 7-"
        #done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
        ## called it 'ignore' in my version
        assume = update-index --assume-unchanged
        unassume = update-index --no-assume-unchanged
        assumed = "!git ls-files -v | grep ^h | cut -c 3-"
        unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
        assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
        lasttag = describe --tags --abbrev=0
        lt = describe --tags --abbrev=0
        ours = "!f() { git co --ours $@ && git add $@; }; f"
        theirs = "!f() { git co --theirs $@ && git add $@; }; f"
        cp = cherry-pick
        st = status -s
        cl = clone
        co = checkout
        # br = branch 
        dw = !git d --word-diff
        dc = !git d --cached
        r = reset
        r1 = reset HEAD^
        r2 = reset HEAD^^
        rh = reset --hard
        rh1 = reset HEAD^ --hard
        rh2 = reset HEAD^^ --hard
        svnr = svn rebase
        svnd = svn dcommit
        svnl = svn log --oneline --show-commit
        sl = stash list
        sa = stash apply
        ss = stash save
		stree = subtree
		smu = submodule update
		smui = submodule update --init
		smi = "!git smui"
		spurm = "!f() { git f && git rebase origin/master; }; f"
		pohm = push -u origin HEAD:master
        smur = submodule update --remote
        pohm = push origin HEAD:master
        ####################################################################################################
        
[filter "lfs"]
		process = git-lfs filter-process
        required = true
        clean = git-lfs clean -- %f
        smudge = git-lfs smudge -- %f
[user]
        useConfigOnly = true
        name = Marcel 'childNoÍ¡.de' Trautwein
        email = ""

[diff]
        tool = p4merge
        submodule=log
[difftool]
        prompt = false

[merge]
        tool = p4merge
		branchdesc = true
		log = true ## defaults to 20
[mergetool]
        prompt = true
        keepTemporaries = false
        keepBackup = false

[difftool "sourcetree"]
        cmd = opendiff \"$LOCAL\" \"$REMOTE\"
        path = 
[mergetool "sourcetree"]
        cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
        trustExitCode = true

[difftool "Kaleidoscope"]
        cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[mergetool "Kaleidoscope"]
        cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot

[difftool "bcomp"]
        trustExitCode = true
        cmd = "/usr/local/bin/bcomp" "$LOCAL" "$REMOTE"
[mergetool "bcomp"]
        trustExitCode = true
        cmd = "/usr/local/bin/bcomp" "$BASE" "$MERGED"
[mergetool "bcomp_pro"]
        trustExitCode = true
        cmd = "/usr/local/bin/bcomp" "$LOCAL" "$REMOTE" "$BASE" "$MERGED"

[difftool "p4merge"]
        cmd = "p4merge \"$LOCAL\" \"$REMOTE\""
[mergetool "p4merge"]
        cmd = "p4merge \"$BASE\" \"$REMOTE\" \"$LOCAL\" \"$MERGED\""


[core]
		autocrlf = false
        safecrlf = warn
	excludesfile = ~/.gitignore_global
        ## defaults:
        # whitespace = blank-at-eol,blank-at-eof,space-before-tab
        # whitespace = -indent-with-non-tab,-tab-in-indent,-cr-at-eol
        ## hint: indent-with-non-tab means "prefer tabs, not prefer spaces!!"
        ## hint: -trailing-space == -blank-at-eol,-blank-at-eof
        ## hint: tabwidth=8
        whitespace = tab-in-indent

[apply]
        whitespace = fix

[branch]
        autosetupmerge = true

[fetch]
        recurseSubmodules = true

[status]
        submoduleSummary = true
        branch = true
        relativePaths = false

[tag]
        forceSignAnnotated = true
        sort = "-version:refname"

[versionsort]
        prereleaseSuffix = "-rc"

[push]
        default = simple
        followTags = true
		recurseSubmodules = on-demand

[url "https://github.com/"]
        insteadOf = git://github.com/
        insteadOf = git://github.com:
        insteadOf = git@github.com:
[url "git@github.com:"]
        pushInsteadOf = git://github.com/
        pushInsteadOf = git://github.com:
        pushInsteadOf = https://github.com/
[url "git@gist.github.com:"]
        pushInsteadOf = git://gist.github.com/childnode/
        pushInsteadOf = git://gist.github.com:childnode/
        pushInsteadOf = https://gist.github.com/childnode/
		pushInsteadOf = https://gist.github.com/

[url "https://gitorious.org"]
        insteadOf = git://gitorious.org/
        insteadOf = git://gitorious.org:
[url "git://gitorious.org"]
        pushInsteadOf = https://gitorious.org

[url "git@bitbucket.org:"]
        insteadOf = https://bitbucket.org
[pull]
		rebase = preserve
